module Courier
  module Models
    type preference =
      {
        status: Courier::Models::Preference::status,
        channel_preferences: ::Array[Courier::Preference::ChannelPreference]?,
        rules: ::Array[Courier::Preference::Rule]?,
        source: Courier::Models::Preference::source?
      }

    class Preference < Courier::Internal::Type::BaseModel
      attr_accessor status: Courier::Models::Preference::status

      attr_accessor channel_preferences: ::Array[Courier::Preference::ChannelPreference]?

      attr_accessor rules: ::Array[Courier::Preference::Rule]?

      attr_accessor source: Courier::Models::Preference::source?

      def initialize: (
        status: Courier::Models::Preference::status,
        ?channel_preferences: ::Array[Courier::Preference::ChannelPreference]?,
        ?rules: ::Array[Courier::Preference::Rule]?,
        ?source: Courier::Models::Preference::source?
      ) -> void

      def to_hash: -> {
        status: Courier::Models::Preference::status,
        channel_preferences: ::Array[Courier::Preference::ChannelPreference]?,
        rules: ::Array[Courier::Preference::Rule]?,
        source: Courier::Models::Preference::source?
      }

      type status = :OPTED_IN | :OPTED_OUT | :REQUIRED

      module Status
        extend Courier::Internal::Type::Enum

        OPTED_IN: :OPTED_IN
        OPTED_OUT: :OPTED_OUT
        REQUIRED: :REQUIRED

        def self?.values: -> ::Array[Courier::Models::Preference::status]
      end

      type channel_preference =
        { channel: Courier::Models::Preference::ChannelPreference::channel }

      class ChannelPreference < Courier::Internal::Type::BaseModel
        attr_accessor channel: Courier::Models::Preference::ChannelPreference::channel

        def initialize: (
          channel: Courier::Models::Preference::ChannelPreference::channel
        ) -> void

        def to_hash: -> {
          channel: Courier::Models::Preference::ChannelPreference::channel
        }

        type channel =
          :direct_message | :email | :push | :sms | :webhook | :inbox

        module Channel
          extend Courier::Internal::Type::Enum

          DIRECT_MESSAGE: :direct_message
          EMAIL: :email
          PUSH: :push
          SMS: :sms
          WEBHOOK: :webhook
          INBOX: :inbox

          def self?.values: -> ::Array[Courier::Models::Preference::ChannelPreference::channel]
        end
      end

      type rule = { until_: String, start: String? }

      class Rule < Courier::Internal::Type::BaseModel
        attr_accessor until_: String

        attr_accessor start: String?

        def initialize: (until_: String, ?start: String?) -> void

        def to_hash: -> { until_: String, start: String? }
      end

      type source = :subscription | :list | :recipient

      module Source
        extend Courier::Internal::Type::Enum

        SUBSCRIPTION: :subscription
        LIST: :list
        RECIPIENT: :recipient

        def self?.values: -> ::Array[Courier::Models::Preference::source]
      end
    end
  end
end
