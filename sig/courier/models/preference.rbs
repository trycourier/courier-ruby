module Courier
  module Models
    type preference =
      {
        status: Courier::Models::Users::preference_status,
        channel_preferences: ::Array[Courier::ChannelPreference]?,
        rules: ::Array[Courier::Rule]?,
        source: Courier::Models::Preference::source?
      }

    class Preference < Courier::Internal::Type::BaseModel
      attr_accessor status: Courier::Models::Users::preference_status

      attr_accessor channel_preferences: ::Array[Courier::ChannelPreference]?

      attr_accessor rules: ::Array[Courier::Rule]?

      attr_accessor source: Courier::Models::Preference::source?

      def initialize: (
        status: Courier::Models::Users::preference_status,
        ?channel_preferences: ::Array[Courier::ChannelPreference]?,
        ?rules: ::Array[Courier::Rule]?,
        ?source: Courier::Models::Preference::source?
      ) -> void

      def to_hash: -> {
        status: Courier::Models::Users::preference_status,
        channel_preferences: ::Array[Courier::ChannelPreference]?,
        rules: ::Array[Courier::Rule]?,
        source: Courier::Models::Preference::source?
      }

      type source = :subscription | :list | :recipient

      module Source
        extend Courier::Internal::Type::Enum

        SUBSCRIPTION: :subscription
        LIST: :list
        RECIPIENT: :recipient

        def self?.values: -> ::Array[Courier::Models::Preference::source]
      end
    end
  end
end
