module Courier
  module Models
    type user_recipient =
      {
        account_id: String?,
        context: Courier::MessageContext?,
        data: ::Hash[Symbol, top]?,
        email: String?,
        locale: String?,
        phone_number: String?,
        preferences: Courier::UserRecipient::Preferences?,
        tenant_id: String?,
        user_id: String?
      }

    class UserRecipient < Courier::Internal::Type::BaseModel
      attr_accessor account_id: String?

      attr_accessor context: Courier::MessageContext?

      attr_accessor data: ::Hash[Symbol, top]?

      attr_accessor email: String?

      attr_accessor locale: String?

      attr_accessor phone_number: String?

      attr_accessor preferences: Courier::UserRecipient::Preferences?

      attr_accessor tenant_id: String?

      attr_accessor user_id: String?

      def initialize: (
        ?account_id: String?,
        ?context: Courier::MessageContext?,
        ?data: ::Hash[Symbol, top]?,
        ?email: String?,
        ?locale: String?,
        ?phone_number: String?,
        ?preferences: Courier::UserRecipient::Preferences?,
        ?tenant_id: String?,
        ?user_id: String?
      ) -> void

      def to_hash: -> {
        account_id: String?,
        context: Courier::MessageContext?,
        data: ::Hash[Symbol, top]?,
        email: String?,
        locale: String?,
        phone_number: String?,
        preferences: Courier::UserRecipient::Preferences?,
        tenant_id: String?,
        user_id: String?
      }

      type preferences =
        {
          notifications: ::Hash[Symbol, Courier::UserRecipient::Preferences::Notification],
          categories: ::Hash[Symbol, Courier::UserRecipient::Preferences::Category]?,
          template_id: String?
        }

      class Preferences < Courier::Internal::Type::BaseModel
        attr_accessor notifications: ::Hash[Symbol, Courier::UserRecipient::Preferences::Notification]

        attr_accessor categories: ::Hash[Symbol, Courier::UserRecipient::Preferences::Category]?

        attr_accessor template_id: String?

        def initialize: (
          notifications: ::Hash[Symbol, Courier::UserRecipient::Preferences::Notification],
          ?categories: ::Hash[Symbol, Courier::UserRecipient::Preferences::Category]?,
          ?template_id: String?
        ) -> void

        def to_hash: -> {
          notifications: ::Hash[Symbol, Courier::UserRecipient::Preferences::Notification],
          categories: ::Hash[Symbol, Courier::UserRecipient::Preferences::Category]?,
          template_id: String?
        }

        type notification =
          {
            status: Courier::Models::Users::preference_status,
            channel_preferences: ::Array[Courier::ChannelPreference]?,
            rules: ::Array[Courier::Rule]?,
            source: Courier::Models::UserRecipient::Preferences::Notification::source?
          }

        class Notification < Courier::Internal::Type::BaseModel
          attr_accessor status: Courier::Models::Users::preference_status

          attr_accessor channel_preferences: ::Array[Courier::ChannelPreference]?

          attr_accessor rules: ::Array[Courier::Rule]?

          attr_accessor source: Courier::Models::UserRecipient::Preferences::Notification::source?

          def initialize: (
            status: Courier::Models::Users::preference_status,
            ?channel_preferences: ::Array[Courier::ChannelPreference]?,
            ?rules: ::Array[Courier::Rule]?,
            ?source: Courier::Models::UserRecipient::Preferences::Notification::source?
          ) -> void

          def to_hash: -> {
            status: Courier::Models::Users::preference_status,
            channel_preferences: ::Array[Courier::ChannelPreference]?,
            rules: ::Array[Courier::Rule]?,
            source: Courier::Models::UserRecipient::Preferences::Notification::source?
          }

          type source = :subscription | :list | :recipient

          module Source
            extend Courier::Internal::Type::Enum

            SUBSCRIPTION: :subscription
            LIST: :list
            RECIPIENT: :recipient

            def self?.values: -> ::Array[Courier::Models::UserRecipient::Preferences::Notification::source]
          end
        end

        type category =
          {
            status: Courier::Models::Users::preference_status,
            channel_preferences: ::Array[Courier::ChannelPreference]?,
            rules: ::Array[Courier::Rule]?,
            source: Courier::Models::UserRecipient::Preferences::Category::source?
          }

        class Category < Courier::Internal::Type::BaseModel
          attr_accessor status: Courier::Models::Users::preference_status

          attr_accessor channel_preferences: ::Array[Courier::ChannelPreference]?

          attr_accessor rules: ::Array[Courier::Rule]?

          attr_accessor source: Courier::Models::UserRecipient::Preferences::Category::source?

          def initialize: (
            status: Courier::Models::Users::preference_status,
            ?channel_preferences: ::Array[Courier::ChannelPreference]?,
            ?rules: ::Array[Courier::Rule]?,
            ?source: Courier::Models::UserRecipient::Preferences::Category::source?
          ) -> void

          def to_hash: -> {
            status: Courier::Models::Users::preference_status,
            channel_preferences: ::Array[Courier::ChannelPreference]?,
            rules: ::Array[Courier::Rule]?,
            source: Courier::Models::UserRecipient::Preferences::Category::source?
          }

          type source = :subscription | :list | :recipient

          module Source
            extend Courier::Internal::Type::Enum

            SUBSCRIPTION: :subscription
            LIST: :list
            RECIPIENT: :recipient

            def self?.values: -> ::Array[Courier::Models::UserRecipient::Preferences::Category::source]
          end
        end
      end
    end
  end
end
