module Courier
  module Models
    type content =
      Courier::Content::ElementalContent
      | Courier::Content::ElementalContentSugar

    module Content
      extend Courier::Internal::Type::Union

      type elemental_content =
        {
          elements: ::Array[Courier::Models::Content::ElementalContent::element],
          version: String,
          brand: top
        }

      class ElementalContent < Courier::Internal::Type::BaseModel
        attr_accessor elements: ::Array[Courier::Models::Content::ElementalContent::element]

        attr_accessor version: String

        attr_reader brand: top?

        def brand=: (top) -> top

        def initialize: (
          elements: ::Array[Courier::Models::Content::ElementalContent::element],
          version: String,
          ?brand: top
        ) -> void

        def to_hash: -> {
          elements: ::Array[Courier::Models::Content::ElementalContent::element],
          version: String,
          brand: top
        }

        type element =
          Courier::Content::ElementalContent::Element::UnionMember0
          | Courier::Content::ElementalContent::Element::UnionMember1
          | Courier::Content::ElementalContent::Element::UnionMember2
          | Courier::Content::ElementalContent::Element::UnionMember3
          | Courier::Content::ElementalContent::Element::UnionMember4
          | Courier::Content::ElementalContent::Element::UnionMember5

        module Element
          extend Courier::Internal::Type::Union

          type union_member0 =
            {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember0::type_
            }

          class UnionMember0 < Courier::Internal::Type::BaseModel
            attr_accessor channels: ::Array[String]?

            attr_accessor if_: String?

            attr_accessor loop_: String?

            attr_accessor ref: String?

            attr_reader type: Courier::Models::Content::ElementalContent::Element::UnionMember0::type_?

            def type=: (
              Courier::Models::Content::ElementalContent::Element::UnionMember0::type_
            ) -> Courier::Models::Content::ElementalContent::Element::UnionMember0::type_

            def initialize: (
              ?channels: ::Array[String]?,
              ?if_: String?,
              ?loop_: String?,
              ?ref: String?,
              ?type: Courier::Models::Content::ElementalContent::Element::UnionMember0::type_
            ) -> void

            def to_hash: -> {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember0::type_
            }

            type type_ = :text

            module Type
              extend Courier::Internal::Type::Enum

              TEXT: :text

              def self?.values: -> ::Array[Courier::Models::Content::ElementalContent::Element::UnionMember0::type_]
            end
          end

          type union_member1 =
            {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember1::type_
            }

          class UnionMember1 < Courier::Internal::Type::BaseModel
            attr_accessor channels: ::Array[String]?

            attr_accessor if_: String?

            attr_accessor loop_: String?

            attr_accessor ref: String?

            attr_reader type: Courier::Models::Content::ElementalContent::Element::UnionMember1::type_?

            def type=: (
              Courier::Models::Content::ElementalContent::Element::UnionMember1::type_
            ) -> Courier::Models::Content::ElementalContent::Element::UnionMember1::type_

            def initialize: (
              ?channels: ::Array[String]?,
              ?if_: String?,
              ?loop_: String?,
              ?ref: String?,
              ?type: Courier::Models::Content::ElementalContent::Element::UnionMember1::type_
            ) -> void

            def to_hash: -> {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember1::type_
            }

            type type_ = :meta

            module Type
              extend Courier::Internal::Type::Enum

              META: :meta

              def self?.values: -> ::Array[Courier::Models::Content::ElementalContent::Element::UnionMember1::type_]
            end
          end

          type union_member2 =
            {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember2::type_
            }

          class UnionMember2 < Courier::Internal::Type::BaseModel
            attr_accessor channels: ::Array[String]?

            attr_accessor if_: String?

            attr_accessor loop_: String?

            attr_accessor ref: String?

            attr_reader type: Courier::Models::Content::ElementalContent::Element::UnionMember2::type_?

            def type=: (
              Courier::Models::Content::ElementalContent::Element::UnionMember2::type_
            ) -> Courier::Models::Content::ElementalContent::Element::UnionMember2::type_

            def initialize: (
              ?channels: ::Array[String]?,
              ?if_: String?,
              ?loop_: String?,
              ?ref: String?,
              ?type: Courier::Models::Content::ElementalContent::Element::UnionMember2::type_
            ) -> void

            def to_hash: -> {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember2::type_
            }

            type type_ = :image

            module Type
              extend Courier::Internal::Type::Enum

              IMAGE: :image

              def self?.values: -> ::Array[Courier::Models::Content::ElementalContent::Element::UnionMember2::type_]
            end
          end

          type union_member3 =
            {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember3::type_
            }

          class UnionMember3 < Courier::Internal::Type::BaseModel
            attr_accessor channels: ::Array[String]?

            attr_accessor if_: String?

            attr_accessor loop_: String?

            attr_accessor ref: String?

            attr_reader type: Courier::Models::Content::ElementalContent::Element::UnionMember3::type_?

            def type=: (
              Courier::Models::Content::ElementalContent::Element::UnionMember3::type_
            ) -> Courier::Models::Content::ElementalContent::Element::UnionMember3::type_

            def initialize: (
              ?channels: ::Array[String]?,
              ?if_: String?,
              ?loop_: String?,
              ?ref: String?,
              ?type: Courier::Models::Content::ElementalContent::Element::UnionMember3::type_
            ) -> void

            def to_hash: -> {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember3::type_
            }

            type type_ = :action

            module Type
              extend Courier::Internal::Type::Enum

              ACTION: :action

              def self?.values: -> ::Array[Courier::Models::Content::ElementalContent::Element::UnionMember3::type_]
            end
          end

          type union_member4 =
            {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember4::type_
            }

          class UnionMember4 < Courier::Internal::Type::BaseModel
            attr_accessor channels: ::Array[String]?

            attr_accessor if_: String?

            attr_accessor loop_: String?

            attr_accessor ref: String?

            attr_reader type: Courier::Models::Content::ElementalContent::Element::UnionMember4::type_?

            def type=: (
              Courier::Models::Content::ElementalContent::Element::UnionMember4::type_
            ) -> Courier::Models::Content::ElementalContent::Element::UnionMember4::type_

            def initialize: (
              ?channels: ::Array[String]?,
              ?if_: String?,
              ?loop_: String?,
              ?ref: String?,
              ?type: Courier::Models::Content::ElementalContent::Element::UnionMember4::type_
            ) -> void

            def to_hash: -> {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember4::type_
            }

            type type_ = :divider

            module Type
              extend Courier::Internal::Type::Enum

              DIVIDER: :divider

              def self?.values: -> ::Array[Courier::Models::Content::ElementalContent::Element::UnionMember4::type_]
            end
          end

          type union_member5 =
            {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember5::type_
            }

          class UnionMember5 < Courier::Internal::Type::BaseModel
            attr_accessor channels: ::Array[String]?

            attr_accessor if_: String?

            attr_accessor loop_: String?

            attr_accessor ref: String?

            attr_reader type: Courier::Models::Content::ElementalContent::Element::UnionMember5::type_?

            def type=: (
              Courier::Models::Content::ElementalContent::Element::UnionMember5::type_
            ) -> Courier::Models::Content::ElementalContent::Element::UnionMember5::type_

            def initialize: (
              ?channels: ::Array[String]?,
              ?if_: String?,
              ?loop_: String?,
              ?ref: String?,
              ?type: Courier::Models::Content::ElementalContent::Element::UnionMember5::type_
            ) -> void

            def to_hash: -> {
              channels: ::Array[String]?,
              if_: String?,
              loop_: String?,
              ref: String?,
              type: Courier::Models::Content::ElementalContent::Element::UnionMember5::type_
            }

            type type_ = :quote

            module Type
              extend Courier::Internal::Type::Enum

              QUOTE: :quote

              def self?.values: -> ::Array[Courier::Models::Content::ElementalContent::Element::UnionMember5::type_]
            end
          end

          def self?.variants: -> ::Array[Courier::Models::Content::ElementalContent::element]
        end
      end

      type elemental_content_sugar = { body: String, title: String }

      class ElementalContentSugar < Courier::Internal::Type::BaseModel
        attr_accessor body: String

        attr_accessor title: String

        def initialize: (body: String, title: String) -> void

        def to_hash: -> { body: String, title: String }
      end

      def self?.variants: -> ::Array[Courier::Models::content]
    end
  end
end
