module Courier
  module Models
    type brand_snippets = { items: ::Array[Courier::BrandSnippets::Item] }

    class BrandSnippets < Courier::Internal::Type::BaseModel
      attr_accessor items: ::Array[Courier::BrandSnippets::Item]

      def initialize: (items: ::Array[Courier::BrandSnippets::Item]) -> void

      def to_hash: -> { items: ::Array[Courier::BrandSnippets::Item] }

      type item =
        {
          format_: Courier::Models::BrandSnippets::Item::format_,
          name: String,
          value: String
        }

      class Item < Courier::Internal::Type::BaseModel
        attr_accessor format_: Courier::Models::BrandSnippets::Item::format_

        attr_accessor name: String

        attr_accessor value: String

        def initialize: (
          format_: Courier::Models::BrandSnippets::Item::format_,
          name: String,
          value: String
        ) -> void

        def to_hash: -> {
          format_: Courier::Models::BrandSnippets::Item::format_,
          name: String,
          value: String
        }

        type format_ = :handlebars

        module Format
          extend Courier::Internal::Type::Enum

          HANDLEBARS: :handlebars

          def self?.values: -> ::Array[Courier::Models::BrandSnippets::Item::format_]
        end
      end
    end
  end
end
