module Courier
  module Models
    type recipient =
      Courier::Recipient::AudienceRecipient
      | Courier::Recipient::UnionMember1
      | Courier::Recipient::UnionMember2
      | Courier::UserRecipient
      | Courier::Recipient::SlackRecipient
      | Courier::Recipient::MsTeamsRecipient
      | ::Hash[Symbol, top]
      | Courier::Recipient::PagerdutyRecipient
      | Courier::Recipient::WebhookRecipient

    module Recipient
      extend Courier::Internal::Type::Union

      type audience_recipient =
        {
          audience_id: String,
          data: ::Hash[Symbol, top]?,
          filters: ::Array[Courier::Recipient::AudienceRecipient::Filter]?
        }

      class AudienceRecipient < Courier::Internal::Type::BaseModel
        attr_accessor audience_id: String

        attr_accessor data: ::Hash[Symbol, top]?

        attr_accessor filters: ::Array[Courier::Recipient::AudienceRecipient::Filter]?

        def initialize: (
          audience_id: String,
          ?data: ::Hash[Symbol, top]?,
          ?filters: ::Array[Courier::Recipient::AudienceRecipient::Filter]?
        ) -> void

        def to_hash: -> {
          audience_id: String,
          data: ::Hash[Symbol, top]?,
          filters: ::Array[Courier::Recipient::AudienceRecipient::Filter]?
        }

        type filter =
          {
            operator: Courier::Models::Recipient::AudienceRecipient::Filter::operator,
            path: Courier::Models::Recipient::AudienceRecipient::Filter::path,
            value: String
          }

        class Filter < Courier::Internal::Type::BaseModel
          attr_accessor operator: Courier::Models::Recipient::AudienceRecipient::Filter::operator

          attr_accessor path: Courier::Models::Recipient::AudienceRecipient::Filter::path

          attr_accessor value: String

          def initialize: (
            operator: Courier::Models::Recipient::AudienceRecipient::Filter::operator,
            path: Courier::Models::Recipient::AudienceRecipient::Filter::path,
            value: String
          ) -> void

          def to_hash: -> {
            operator: Courier::Models::Recipient::AudienceRecipient::Filter::operator,
            path: Courier::Models::Recipient::AudienceRecipient::Filter::path,
            value: String
          }

          type operator = :MEMBER_OF

          module Operator
            extend Courier::Internal::Type::Enum

            MEMBER_OF: :MEMBER_OF

            def self?.values: -> ::Array[Courier::Models::Recipient::AudienceRecipient::Filter::operator]
          end

          type path = :account_id

          module Path
            extend Courier::Internal::Type::Enum

            ACCOUNT_ID: :account_id

            def self?.values: -> ::Array[Courier::Models::Recipient::AudienceRecipient::Filter::path]
          end
        end
      end

      type union_member1 =
        {
          data: ::Hash[Symbol, top]?,
          filters: ::Array[Courier::Recipient::UnionMember1::Filter]?,
          list_id: String?
        }

      class UnionMember1 < Courier::Internal::Type::BaseModel
        attr_accessor data: ::Hash[Symbol, top]?

        attr_accessor filters: ::Array[Courier::Recipient::UnionMember1::Filter]?

        attr_accessor list_id: String?

        def initialize: (
          ?data: ::Hash[Symbol, top]?,
          ?filters: ::Array[Courier::Recipient::UnionMember1::Filter]?,
          ?list_id: String?
        ) -> void

        def to_hash: -> {
          data: ::Hash[Symbol, top]?,
          filters: ::Array[Courier::Recipient::UnionMember1::Filter]?,
          list_id: String?
        }

        type filter =
          {
            operator: Courier::Models::Recipient::UnionMember1::Filter::operator,
            path: Courier::Models::Recipient::UnionMember1::Filter::path,
            value: String
          }

        class Filter < Courier::Internal::Type::BaseModel
          attr_accessor operator: Courier::Models::Recipient::UnionMember1::Filter::operator

          attr_accessor path: Courier::Models::Recipient::UnionMember1::Filter::path

          attr_accessor value: String

          def initialize: (
            operator: Courier::Models::Recipient::UnionMember1::Filter::operator,
            path: Courier::Models::Recipient::UnionMember1::Filter::path,
            value: String
          ) -> void

          def to_hash: -> {
            operator: Courier::Models::Recipient::UnionMember1::Filter::operator,
            path: Courier::Models::Recipient::UnionMember1::Filter::path,
            value: String
          }

          type operator = :MEMBER_OF

          module Operator
            extend Courier::Internal::Type::Enum

            MEMBER_OF: :MEMBER_OF

            def self?.values: -> ::Array[Courier::Models::Recipient::UnionMember1::Filter::operator]
          end

          type path = :account_id

          module Path
            extend Courier::Internal::Type::Enum

            ACCOUNT_ID: :account_id

            def self?.values: -> ::Array[Courier::Models::Recipient::UnionMember1::Filter::path]
          end
        end
      end

      type union_member2 = { data: ::Hash[Symbol, top]?, list_pattern: String? }

      class UnionMember2 < Courier::Internal::Type::BaseModel
        attr_accessor data: ::Hash[Symbol, top]?

        attr_accessor list_pattern: String?

        def initialize: (
          ?data: ::Hash[Symbol, top]?,
          ?list_pattern: String?
        ) -> void

        def to_hash: -> { data: ::Hash[Symbol, top]?, list_pattern: String? }
      end

      type slack_recipient =
        { slack: Courier::Models::Recipient::SlackRecipient::slack }

      class SlackRecipient < Courier::Internal::Type::BaseModel
        attr_accessor slack: Courier::Models::Recipient::SlackRecipient::slack

        def initialize: (
          slack: Courier::Models::Recipient::SlackRecipient::slack
        ) -> void

        def to_hash: -> {
          slack: Courier::Models::Recipient::SlackRecipient::slack
        }

        type slack =
          Courier::Recipient::SlackRecipient::Slack::SendToSlackChannel
          | Courier::Recipient::SlackRecipient::Slack::SendToSlackEmail
          | Courier::Recipient::SlackRecipient::Slack::SendToSlackUserID

        module Slack
          extend Courier::Internal::Type::Union

          type send_to_slack_channel = { channel: String }

          class SendToSlackChannel < Courier::Models::SlackBaseProperties
            def channel: -> String

            def channel=: (String _) -> String

            def initialize: (channel: String) -> void

            def to_hash: -> { channel: String }
          end

          type send_to_slack_email = { email: String }

          class SendToSlackEmail < Courier::Models::SlackBaseProperties
            def email: -> String

            def email=: (String _) -> String

            def initialize: (email: String) -> void

            def to_hash: -> { email: String }
          end

          type send_to_slack_user_id = { user_id: String }

          class SendToSlackUserID < Courier::Models::SlackBaseProperties
            def user_id: -> String

            def user_id=: (String _) -> String

            def initialize: (user_id: String) -> void

            def to_hash: -> { user_id: String }
          end

          def self?.variants: -> ::Array[Courier::Models::Recipient::SlackRecipient::slack]
        end
      end

      type ms_teams_recipient =
        { ms_teams: Courier::Models::Recipient::MsTeamsRecipient::ms_teams }

      class MsTeamsRecipient < Courier::Internal::Type::BaseModel
        attr_accessor ms_teams: Courier::Models::Recipient::MsTeamsRecipient::ms_teams

        def initialize: (
          ms_teams: Courier::Models::Recipient::MsTeamsRecipient::ms_teams
        ) -> void

        def to_hash: -> {
          ms_teams: Courier::Models::Recipient::MsTeamsRecipient::ms_teams
        }

        type ms_teams =
          Courier::Recipient::MsTeamsRecipient::MsTeams::SendToMsTeamsUserID
          | Courier::Recipient::MsTeamsRecipient::MsTeams::SendToMsTeamsEmail
          | Courier::Recipient::MsTeamsRecipient::MsTeams::SendToMsTeamsChannelID
          | Courier::Recipient::MsTeamsRecipient::MsTeams::SendToMsTeamsConversationID
          | Courier::Recipient::MsTeamsRecipient::MsTeams::SendToMsTeamsChannelName

        module MsTeams
          extend Courier::Internal::Type::Union

          type send_to_ms_teams_user_id = { user_id: String }

          class SendToMsTeamsUserID < Courier::Models::MsTeamsBaseProperties
            def user_id: -> String

            def user_id=: (String _) -> String

            def initialize: (user_id: String) -> void

            def to_hash: -> { user_id: String }
          end

          type send_to_ms_teams_email = { email: String }

          class SendToMsTeamsEmail < Courier::Models::MsTeamsBaseProperties
            def email: -> String

            def email=: (String _) -> String

            def initialize: (email: String) -> void

            def to_hash: -> { email: String }
          end

          type send_to_ms_teams_channel_id = { channel_id: String }

          class SendToMsTeamsChannelID < Courier::Models::MsTeamsBaseProperties
            def channel_id: -> String

            def channel_id=: (String _) -> String

            def initialize: (channel_id: String) -> void

            def to_hash: -> { channel_id: String }
          end

          type send_to_ms_teams_conversation_id = { conversation_id: String }

          class SendToMsTeamsConversationID < Courier::Models::MsTeamsBaseProperties
            def conversation_id: -> String

            def conversation_id=: (String _) -> String

            def initialize: (conversation_id: String) -> void

            def to_hash: -> { conversation_id: String }
          end

          type send_to_ms_teams_channel_name =
            { channel_name: String, team_id: String }

          class SendToMsTeamsChannelName < Courier::Models::MsTeamsBaseProperties
            def channel_name: -> String

            def channel_name=: (String _) -> String

            def team_id: -> String

            def team_id=: (String _) -> String

            def initialize: (channel_name: String, team_id: String) -> void

            def to_hash: -> { channel_name: String, team_id: String }
          end

          def self?.variants: -> ::Array[Courier::Models::Recipient::MsTeamsRecipient::ms_teams]
        end
      end

      type pagerduty_recipient =
        { pagerduty: Courier::Recipient::PagerdutyRecipient::Pagerduty }

      class PagerdutyRecipient < Courier::Internal::Type::BaseModel
        attr_accessor pagerduty: Courier::Recipient::PagerdutyRecipient::Pagerduty

        def initialize: (
          pagerduty: Courier::Recipient::PagerdutyRecipient::Pagerduty
        ) -> void

        def to_hash: -> {
          pagerduty: Courier::Recipient::PagerdutyRecipient::Pagerduty
        }

        type pagerduty =
          {
            event_action: String?,
            routing_key: String?,
            severity: String?,
            source: String?
          }

        class Pagerduty < Courier::Internal::Type::BaseModel
          attr_accessor event_action: String?

          attr_accessor routing_key: String?

          attr_accessor severity: String?

          attr_accessor source: String?

          def initialize: (
            ?event_action: String?,
            ?routing_key: String?,
            ?severity: String?,
            ?source: String?
          ) -> void

          def to_hash: -> {
            event_action: String?,
            routing_key: String?,
            severity: String?,
            source: String?
          }
        end
      end

      type webhook_recipient =
        { webhook: Courier::Recipient::WebhookRecipient::Webhook }

      class WebhookRecipient < Courier::Internal::Type::BaseModel
        attr_accessor webhook: Courier::Recipient::WebhookRecipient::Webhook

        def initialize: (
          webhook: Courier::Recipient::WebhookRecipient::Webhook
        ) -> void

        def to_hash: -> {
          webhook: Courier::Recipient::WebhookRecipient::Webhook
        }

        type webhook =
          {
            url: String,
            authentication: Courier::Recipient::WebhookRecipient::Webhook::Authentication?,
            headers: ::Hash[Symbol, String]?,
            method_: Courier::Models::Recipient::WebhookRecipient::Webhook::method_?,
            profile: Courier::Models::Recipient::WebhookRecipient::Webhook::profile?
          }

        class Webhook < Courier::Internal::Type::BaseModel
          attr_accessor url: String

          attr_accessor authentication: Courier::Recipient::WebhookRecipient::Webhook::Authentication?

          attr_accessor headers: ::Hash[Symbol, String]?

          attr_accessor method_: Courier::Models::Recipient::WebhookRecipient::Webhook::method_?

          attr_accessor profile: Courier::Models::Recipient::WebhookRecipient::Webhook::profile?

          def initialize: (
            url: String,
            ?authentication: Courier::Recipient::WebhookRecipient::Webhook::Authentication?,
            ?headers: ::Hash[Symbol, String]?,
            ?method_: Courier::Models::Recipient::WebhookRecipient::Webhook::method_?,
            ?profile: Courier::Models::Recipient::WebhookRecipient::Webhook::profile?
          ) -> void

          def to_hash: -> {
            url: String,
            authentication: Courier::Recipient::WebhookRecipient::Webhook::Authentication?,
            headers: ::Hash[Symbol, String]?,
            method_: Courier::Models::Recipient::WebhookRecipient::Webhook::method_?,
            profile: Courier::Models::Recipient::WebhookRecipient::Webhook::profile?
          }

          type authentication =
            {
              mode: Courier::Models::Recipient::WebhookRecipient::Webhook::Authentication::mode,
              token: String?,
              password: String?,
              username: String?
            }

          class Authentication < Courier::Internal::Type::BaseModel
            attr_accessor mode: Courier::Models::Recipient::WebhookRecipient::Webhook::Authentication::mode

            attr_accessor token: String?

            attr_accessor password: String?

            attr_accessor username: String?

            def initialize: (
              mode: Courier::Models::Recipient::WebhookRecipient::Webhook::Authentication::mode,
              ?token: String?,
              ?password: String?,
              ?username: String?
            ) -> void

            def to_hash: -> {
              mode: Courier::Models::Recipient::WebhookRecipient::Webhook::Authentication::mode,
              token: String?,
              password: String?,
              username: String?
            }

            type mode = :none | :basic | :bearer

            module Mode
              extend Courier::Internal::Type::Enum

              NONE: :none
              BASIC: :basic
              BEARER: :bearer

              def self?.values: -> ::Array[Courier::Models::Recipient::WebhookRecipient::Webhook::Authentication::mode]
            end
          end

          type method_ = :POST | :PUT

          module Method
            extend Courier::Internal::Type::Enum

            POST: :POST
            PUT: :PUT

            def self?.values: -> ::Array[Courier::Models::Recipient::WebhookRecipient::Webhook::method_]
          end

          type profile = :limited | :expanded

          module Profile
            extend Courier::Internal::Type::Enum

            LIMITED: :limited
            EXPANDED: :expanded

            def self?.values: -> ::Array[Courier::Models::Recipient::WebhookRecipient::Webhook::profile]
          end
        end
      end

      def self?.variants: -> ::Array[Courier::Models::recipient]

      RecipientDataMap: Courier::Internal::Type::Converter
    end
  end
end
