module Courier
  module Models
    type message_routing =
      {
        channels: ::Array[Courier::Models::message_routing_channel],
        method_: Courier::Models::MessageRouting::method_
      }

    class MessageRouting < Courier::Internal::Type::BaseModel
      attr_accessor channels: ::Array[Courier::Models::message_routing_channel]

      attr_accessor method_: Courier::Models::MessageRouting::method_

      def initialize: (
        channels: ::Array[Courier::Models::message_routing_channel],
        method_: Courier::Models::MessageRouting::method_
      ) -> void

      def to_hash: -> {
        channels: ::Array[Courier::Models::message_routing_channel],
        method_: Courier::Models::MessageRouting::method_
      }

      type method_ = :all | :single

      module Method
        extend Courier::Internal::Type::Enum

        ALL: :all
        SINGLE: :single

        def self?.values: -> ::Array[Courier::Models::MessageRouting::method_]
      end
    end
  end
end
