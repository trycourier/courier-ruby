module Courier
  module Models
    module Users
      type preference_update_or_create_topic_params =
        {
          user_id: String,
          topic: Courier::Users::PreferenceUpdateOrCreateTopicParams::Topic,
          tenant_id: String?
        }
        & Courier::Internal::Type::request_parameters

      class PreferenceUpdateOrCreateTopicParams < Courier::Internal::Type::BaseModel
        extend Courier::Internal::Type::RequestParameters::Converter
        include Courier::Internal::Type::RequestParameters

        attr_accessor user_id: String

        attr_accessor topic: Courier::Users::PreferenceUpdateOrCreateTopicParams::Topic

        attr_accessor tenant_id: String?

        def initialize: (
          user_id: String,
          topic: Courier::Users::PreferenceUpdateOrCreateTopicParams::Topic,
          ?tenant_id: String?,
          ?request_options: Courier::request_opts
        ) -> void

        def to_hash: -> {
          user_id: String,
          topic: Courier::Users::PreferenceUpdateOrCreateTopicParams::Topic,
          tenant_id: String?,
          request_options: Courier::RequestOptions
        }

        type topic =
          {
            status: Courier::Models::preference_status,
            custom_routing: ::Array[Courier::Models::channel_classification]?,
            has_custom_routing: bool?
          }

        class Topic < Courier::Internal::Type::BaseModel
          attr_accessor status: Courier::Models::preference_status

          attr_accessor custom_routing: ::Array[Courier::Models::channel_classification]?

          attr_accessor has_custom_routing: bool?

          def initialize: (
            status: Courier::Models::preference_status,
            ?custom_routing: ::Array[Courier::Models::channel_classification]?,
            ?has_custom_routing: bool?
          ) -> void

          def to_hash: -> {
            status: Courier::Models::preference_status,
            custom_routing: ::Array[Courier::Models::channel_classification]?,
            has_custom_routing: bool?
          }
        end
      end
    end
  end
end
