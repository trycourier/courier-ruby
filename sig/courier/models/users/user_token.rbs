module Courier
  module Models
    class UserToken = Users::UserToken

    module Users
      type user_token =
        {
          provider_key: Courier::Models::Users::UserToken::provider_key,
          token: String?,
          device: Courier::Users::UserToken::Device?,
          expiry_date: Courier::Models::Users::UserToken::expiry_date?,
          properties: top,
          tracking: Courier::Users::UserToken::Tracking?
        }

      class UserToken < Courier::Internal::Type::BaseModel
        attr_accessor provider_key: Courier::Models::Users::UserToken::provider_key

        attr_accessor token: String?

        attr_accessor device: Courier::Users::UserToken::Device?

        attr_accessor expiry_date: Courier::Models::Users::UserToken::expiry_date?

        attr_reader properties: top?

        def properties=: (top) -> top

        attr_accessor tracking: Courier::Users::UserToken::Tracking?

        def initialize: (
          provider_key: Courier::Models::Users::UserToken::provider_key,
          ?token: String?,
          ?device: Courier::Users::UserToken::Device?,
          ?expiry_date: Courier::Models::Users::UserToken::expiry_date?,
          ?properties: top,
          ?tracking: Courier::Users::UserToken::Tracking?
        ) -> void

        def to_hash: -> {
          provider_key: Courier::Models::Users::UserToken::provider_key,
          token: String?,
          device: Courier::Users::UserToken::Device?,
          expiry_date: Courier::Models::Users::UserToken::expiry_date?,
          properties: top,
          tracking: Courier::Users::UserToken::Tracking?
        }

        type provider_key = :"firebase-fcm" | :apn | :expo | :onesignal

        module ProviderKey
          extend Courier::Internal::Type::Enum

          FIREBASE_FCM: :"firebase-fcm"
          APN: :apn
          EXPO: :expo
          ONESIGNAL: :onesignal

          def self?.values: -> ::Array[Courier::Models::Users::UserToken::provider_key]
        end

        type device =
          {
            ad_id: String?,
            app_id: String?,
            device_id: String?,
            manufacturer: String?,
            model: String?,
            platform: String?
          }

        class Device < Courier::Internal::Type::BaseModel
          attr_accessor ad_id: String?

          attr_accessor app_id: String?

          attr_accessor device_id: String?

          attr_accessor manufacturer: String?

          attr_accessor model: String?

          attr_accessor platform: String?

          def initialize: (
            ?ad_id: String?,
            ?app_id: String?,
            ?device_id: String?,
            ?manufacturer: String?,
            ?model: String?,
            ?platform: String?
          ) -> void

          def to_hash: -> {
            ad_id: String?,
            app_id: String?,
            device_id: String?,
            manufacturer: String?,
            model: String?,
            platform: String?
          }
        end

        type expiry_date = String | bool

        module ExpiryDate
          extend Courier::Internal::Type::Union

          def self?.variants: -> ::Array[Courier::Models::Users::UserToken::expiry_date]
        end

        type tracking =
          { ip: String?, lat: String?, long: String?, os_version: String? }

        class Tracking < Courier::Internal::Type::BaseModel
          attr_accessor ip: String?

          attr_accessor lat: String?

          attr_accessor long: String?

          attr_accessor os_version: String?

          def initialize: (
            ?ip: String?,
            ?lat: String?,
            ?long: String?,
            ?os_version: String?
          ) -> void

          def to_hash: -> {
            ip: String?,
            lat: String?,
            long: String?,
            os_version: String?
          }
        end
      end
    end
  end
end
