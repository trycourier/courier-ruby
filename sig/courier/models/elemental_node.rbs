module Courier
  module Models
    type elemental_node =
      Courier::ElementalNode::UnionMember0
      | Courier::ElementalNode::UnionMember1
      | Courier::ElementalNode::Type
      | Courier::ElementalNode::UnionMember3
      | Courier::ElementalNode::UnionMember4
      | Courier::ElementalNode::UnionMember5
      | Courier::ElementalNode::UnionMember6
      | Courier::ElementalNode::UnionMember7

    module ElementalNode
      extend Courier::Internal::Type::Union

      type union_member0 =
        {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember0::type_
        }

      class UnionMember0 < Courier::Internal::Type::BaseModel
        attr_accessor channels: ::Array[String]?

        attr_accessor if_: String?

        attr_accessor loop_: String?

        attr_accessor ref: String?

        attr_reader type: Courier::Models::ElementalNode::UnionMember0::type_?

        def type=: (
          Courier::Models::ElementalNode::UnionMember0::type_
        ) -> Courier::Models::ElementalNode::UnionMember0::type_

        def initialize: (
          ?channels: ::Array[String]?,
          ?if_: String?,
          ?loop_: String?,
          ?ref: String?,
          ?type: Courier::Models::ElementalNode::UnionMember0::type_
        ) -> void

        def to_hash: -> {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember0::type_
        }

        type type_ = :text

        module Type
          extend Courier::Internal::Type::Enum

          TEXT: :text

          def self?.values: -> ::Array[Courier::Models::ElementalNode::UnionMember0::type_]
        end
      end

      type union_member1 =
        {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember1::type_
        }

      class UnionMember1 < Courier::Internal::Type::BaseModel
        attr_accessor channels: ::Array[String]?

        attr_accessor if_: String?

        attr_accessor loop_: String?

        attr_accessor ref: String?

        attr_reader type: Courier::Models::ElementalNode::UnionMember1::type_?

        def type=: (
          Courier::Models::ElementalNode::UnionMember1::type_
        ) -> Courier::Models::ElementalNode::UnionMember1::type_

        def initialize: (
          ?channels: ::Array[String]?,
          ?if_: String?,
          ?loop_: String?,
          ?ref: String?,
          ?type: Courier::Models::ElementalNode::UnionMember1::type_
        ) -> void

        def to_hash: -> {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember1::type_
        }

        type type_ = :meta

        module Type
          extend Courier::Internal::Type::Enum

          META: :meta

          def self?.values: -> ::Array[Courier::Models::ElementalNode::UnionMember1::type_]
        end
      end

      type type_ = { type: Courier::Models::ElementalNode::Type::type_ }

      class Type < Courier::Internal::Type::BaseModel
        attr_accessor type: Courier::Models::ElementalNode::Type::type_

        def initialize: (
          type: Courier::Models::ElementalNode::Type::type_
        ) -> void

        def to_hash: -> { type: Courier::Models::ElementalNode::Type::type_ }

        type type_ = :channel

        module Type
          extend Courier::Internal::Type::Enum

          CHANNEL: :channel

          def self?.values: -> ::Array[Courier::Models::ElementalNode::Type::type_]
        end
      end

      type union_member3 =
        {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember3::type_
        }

      class UnionMember3 < Courier::Internal::Type::BaseModel
        attr_accessor channels: ::Array[String]?

        attr_accessor if_: String?

        attr_accessor loop_: String?

        attr_accessor ref: String?

        attr_reader type: Courier::Models::ElementalNode::UnionMember3::type_?

        def type=: (
          Courier::Models::ElementalNode::UnionMember3::type_
        ) -> Courier::Models::ElementalNode::UnionMember3::type_

        def initialize: (
          ?channels: ::Array[String]?,
          ?if_: String?,
          ?loop_: String?,
          ?ref: String?,
          ?type: Courier::Models::ElementalNode::UnionMember3::type_
        ) -> void

        def to_hash: -> {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember3::type_
        }

        type type_ = :image

        module Type
          extend Courier::Internal::Type::Enum

          IMAGE: :image

          def self?.values: -> ::Array[Courier::Models::ElementalNode::UnionMember3::type_]
        end
      end

      type union_member4 =
        {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember4::type_
        }

      class UnionMember4 < Courier::Internal::Type::BaseModel
        attr_accessor channels: ::Array[String]?

        attr_accessor if_: String?

        attr_accessor loop_: String?

        attr_accessor ref: String?

        attr_reader type: Courier::Models::ElementalNode::UnionMember4::type_?

        def type=: (
          Courier::Models::ElementalNode::UnionMember4::type_
        ) -> Courier::Models::ElementalNode::UnionMember4::type_

        def initialize: (
          ?channels: ::Array[String]?,
          ?if_: String?,
          ?loop_: String?,
          ?ref: String?,
          ?type: Courier::Models::ElementalNode::UnionMember4::type_
        ) -> void

        def to_hash: -> {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember4::type_
        }

        type type_ = :action

        module Type
          extend Courier::Internal::Type::Enum

          ACTION: :action

          def self?.values: -> ::Array[Courier::Models::ElementalNode::UnionMember4::type_]
        end
      end

      type union_member5 =
        {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember5::type_
        }

      class UnionMember5 < Courier::Internal::Type::BaseModel
        attr_accessor channels: ::Array[String]?

        attr_accessor if_: String?

        attr_accessor loop_: String?

        attr_accessor ref: String?

        attr_reader type: Courier::Models::ElementalNode::UnionMember5::type_?

        def type=: (
          Courier::Models::ElementalNode::UnionMember5::type_
        ) -> Courier::Models::ElementalNode::UnionMember5::type_

        def initialize: (
          ?channels: ::Array[String]?,
          ?if_: String?,
          ?loop_: String?,
          ?ref: String?,
          ?type: Courier::Models::ElementalNode::UnionMember5::type_
        ) -> void

        def to_hash: -> {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember5::type_
        }

        type type_ = :divider

        module Type
          extend Courier::Internal::Type::Enum

          DIVIDER: :divider

          def self?.values: -> ::Array[Courier::Models::ElementalNode::UnionMember5::type_]
        end
      end

      type union_member6 =
        { type: Courier::Models::ElementalNode::UnionMember6::type_ }

      class UnionMember6 < Courier::Models::ElementalGroupNode
        def `type`: -> Courier::Models::ElementalNode::UnionMember6::type_?

        def type=: (
          Courier::Models::ElementalNode::UnionMember6::type_ _
        ) -> Courier::Models::ElementalNode::UnionMember6::type_

        def initialize: (
          ?type: Courier::Models::ElementalNode::UnionMember6::type_
        ) -> void

        def to_hash: -> {
          type: Courier::Models::ElementalNode::UnionMember6::type_
        }

        type type_ = :group

        module Type
          extend Courier::Internal::Type::Enum

          GROUP: :group

          def self?.values: -> ::Array[Courier::Models::ElementalNode::UnionMember6::type_]
        end
      end

      type union_member7 =
        {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember7::type_
        }

      class UnionMember7 < Courier::Internal::Type::BaseModel
        attr_accessor channels: ::Array[String]?

        attr_accessor if_: String?

        attr_accessor loop_: String?

        attr_accessor ref: String?

        attr_reader type: Courier::Models::ElementalNode::UnionMember7::type_?

        def type=: (
          Courier::Models::ElementalNode::UnionMember7::type_
        ) -> Courier::Models::ElementalNode::UnionMember7::type_

        def initialize: (
          ?channels: ::Array[String]?,
          ?if_: String?,
          ?loop_: String?,
          ?ref: String?,
          ?type: Courier::Models::ElementalNode::UnionMember7::type_
        ) -> void

        def to_hash: -> {
          channels: ::Array[String]?,
          if_: String?,
          loop_: String?,
          ref: String?,
          type: Courier::Models::ElementalNode::UnionMember7::type_
        }

        type type_ = :quote

        module Type
          extend Courier::Internal::Type::Enum

          QUOTE: :quote

          def self?.values: -> ::Array[Courier::Models::ElementalNode::UnionMember7::type_]
        end
      end

      def self?.variants: -> ::Array[Courier::Models::elemental_node]
    end
  end
end
